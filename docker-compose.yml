

services:
  # Base de données PostgreSQL
  db:
    image: postgres:15
    container_name: hospital_db
    environment:
      POSTGRES_DB: ${DB_NAME:-hospital_db}
      POSTGRES_USER: ${DB_USER:-hospital_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-hospital_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "${DB_PORT:-5432}:5432"
    networks:
      - hospital_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-hospital_user} -d ${DB_NAME:-hospital_db}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Serveur Redis pour le cache
  redis:
    image: redis:7-alpine
    container_name: hospital_redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_password}
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    networks:
      - hospital_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Application web Django
  web:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: hospital_web
    command: >
      sh -c "
        python manage.py migrate &&
        python manage.py collectstatic --noinput &&
        gunicorn --bind 0.0.0.0:8000 --workers 3 --timeout 60 --max-requests 1000 --max-requests-jitter 50 --access-logfile - --error-logfile - hospital_project.wsgi:application
      "
    volumes:
      - static_volume:/app/static
      - media_volume:/app/media
      - logs_volume:/app/logs
    ports:
      - "${WEB_PORT:-8000}:8000"
    environment:
      - DEBUG=${DEBUG:-False}
      - SECRET_KEY=${SECRET_KEY}
      - DB_NAME=${DB_NAME:-hospital_db}
      - DB_USER=${DB_USER:-hospital_user}
      - DB_PASSWORD=${DB_PASSWORD:-hospital_password}
      - DB_HOST=db
      - DB_PORT=5432
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_password}@redis:6379/0
      - ALLOWED_HOSTS=${ALLOWED_HOSTS:-localhost,127.0.0.1}
    networks:
      - hospital_network
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Serveur Nginx pour le reverse proxy et les fichiers statiques
  nginx:
    image: nginx:alpine
    container_name: hospital_nginx
    ports:
      - "${NGINX_PORT:-80}:80"
      - "${NGINX_SSL_PORT:-443}:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
      - static_volume:/app/static:ro
      - media_volume:/app/media:ro
      - ./docker/ssl:/etc/nginx/ssl:ro
    networks:
      - hospital_network
    depends_on:
      - web
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Worker Celery pour les tâches asynchrones
  celery:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: hospital_celery
    command: celery -A hospital_project worker -l info
    volumes:
      - logs_volume:/app/logs
    environment:
      - DEBUG=${DEBUG:-False}
      - SECRET_KEY=${SECRET_KEY}
      - DB_NAME=${DB_NAME:-hospital_db}
      - DB_USER=${DB_USER:-hospital_user}
      - DB_PASSWORD=${DB_PASSWORD:-hospital_password}
      - DB_HOST=db
      - DB_PORT=5432
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_password}@redis:6379/0
      - ALLOWED_HOSTS=${ALLOWED_HOSTS:-localhost,127.0.0.1}
    networks:
      - hospital_network
    depends_on:
      - db
      - redis
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "celery", "inspect", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Scheduler Celery Beat pour les tâches périodiques
  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: hospital_celery_beat
    command: celery -A hospital_project beat -l info
    volumes:
      - logs_volume:/app/logs
    environment:
      - DEBUG=${DEBUG:-False}
      - SECRET_KEY=${SECRET_KEY}
      - DB_NAME=${DB_NAME:-hospital_db}
      - DB_USER=${DB_USER:-hospital_user}
      - DB_PASSWORD=${DB_PASSWORD:-hospital_password}
      - DB_HOST=db
      - DB_PORT=5432
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_password}@redis:6379/0
      - ALLOWED_HOSTS=${ALLOWED_HOSTS:-localhost,127.0.0.1}
    networks:
      - hospital_network
    depends_on:
      - db
      - redis
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "pgrep", "-f", "celery beat"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring avec Prometheus (optionnel)
  prometheus:
    image: prom/prometheus:latest
    container_name: hospital_prometheus
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - hospital_network
    restart: unless-stopped
    profiles:
      - monitoring

  # Dashboard Grafana (optionnel)
  grafana:
    image: grafana/grafana:latest
    container_name: hospital_grafana
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./docker/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - hospital_network
    depends_on:
      - prometheus
    restart: unless-stopped
    profiles:
      - monitoring

volumes:
  postgres_data:
  redis_data:
  static_volume:
  media_volume:
  logs_volume:
  prometheus_data:
  grafana_data:

networks:
  hospital_network:
    driver: bridge