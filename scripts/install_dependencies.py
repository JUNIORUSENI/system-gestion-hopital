#!/usr/bin/env python3
"""
Script d'installation des d√©pendances pour le projet de gestion hospitali√®re
Ce script v√©rifie et installe toutes les d√©pendances requises
"""

import subprocess
import sys
import os
from pathlib import Path

def run_command(command, description):
    """Ex√©cute une commande et g√®re les erreurs"""
    print(f"\n{'='*60}")
    print(f"Ex√©cution: {description}")
    print(f"Commande: {command}")
    print(f"{'='*60}")
    
    try:
        result = subprocess.run(
            command, 
            shell=True, 
            check=True, 
            capture_output=True, 
            text=True
        )
        print(f"‚úÖ Succ√®s: {description}")
        if result.stdout:
            print(f"Sortie: {result.stdout}")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erreur lors de l'ex√©cution: {description}")
        print(f"Code de retour: {e.returncode}")
        print(f"Erreur: {e.stderr}")
        return False

def check_python_version():
    """V√©rifie la version de Python"""
    print("V√©rification de la version de Python...")
    version = sys.version_info
    print(f"Version actuelle: {version.major}.{version.minor}.{version.micro}")
    
    if version.major < 3 or (version.major == 3 and version.minor < 8):
        print("‚ùå Python 3.8 ou sup√©rieur est requis")
        return False
    
    print("‚úÖ Version de Python compatible")
    return True

def install_pip_dependencies():
    """Installe les d√©pendances pip"""
    base_dir = Path(__file__).parent.parent
    
    # Installation des d√©pendances de base
    base_requirements = base_dir / "requirements" / "base.txt"
    if base_requirements.exists():
        if not run_command(
            f"pip install -r {base_requirements}", 
            "Installation des d√©pendances de base"
        ):
            return False
    
    # Installation des d√©pendances de d√©veloppement
    dev_requirements = base_dir / "requirements" / "development.txt"
    if dev_requirements.exists():
        if not run_command(
            f"pip install -r {dev_requirements}", 
            "Installation des d√©pendances de d√©veloppement"
        ):
            return False
    
    # Installation des d√©pendances de production
    prod_requirements = base_dir / "requirements" / "production.txt"
    if prod_requirements.exists():
        if not run_command(
            f"pip install -r {prod_requirements}", 
            "Installation des d√©pendances de production"
        ):
            return False
    
    return True

def setup_environment():
    """Configure l'environnement"""
    base_dir = Path(__file__).parent.parent
    env_file = base_dir / ".env"
    env_example = base_dir / ".env.example"
    
    if not env_file.exists() and env_example.exists():
        print("Cr√©ation du fichier .env √† partir de .env.example...")
        try:
            with open(env_example, 'r') as src, open(env_file, 'w') as dst:
                dst.write(src.read())
            print("‚úÖ Fichier .env cr√©√© avec succ√®s")
        except Exception as e:
            print(f"‚ùå Erreur lors de la cr√©ation du fichier .env: {e}")
            return False
    
    return True

def run_migrations():
    """Ex√©cute les migrations Django"""
    base_dir = Path(__file__).parent.parent
    
    return run_command(
        f"cd {base_dir} && python manage.py migrate", 
        "Ex√©cution des migrations Django"
    )

def create_superuser():
    """Propose de cr√©er un superutilisateur"""
    base_dir = Path(__file__).parent.parent
    
    response = input("\nVoulez-vous cr√©er un superutilisateur ? (y/n): ")
    if response.lower() in ['y', 'yes', 'o', 'oui']:
        return run_command(
            f"cd {base_dir} && python manage.py createsuperuser", 
            "Cr√©ation d'un superutilisateur"
        )
    return True

def collect_static():
    """Collecte les fichiers statiques"""
    base_dir = Path(__file__).parent.parent
    
    return run_command(
        f"cd {base_dir} && python manage.py collectstatic --noinput", 
        "Collecte des fichiers statiques"
    )

def main():
    """Fonction principale"""
    print("üè• Script d'installation pour le syst√®me de gestion hospitali√®re")
    print("=" * 60)
    
    # V√©rification de la version de Python
    if not check_python_version():
        sys.exit(1)
    
    # Installation des d√©pendances
    if not install_pip_dependencies():
        print("‚ùå √âchec de l'installation des d√©pendances")
        sys.exit(1)
    
    # Configuration de l'environnement
    if not setup_environment():
        print("‚ùå √âchec de la configuration de l'environnement")
        sys.exit(1)
    
    # Ex√©cution des migrations
    if not run_migrations():
        print("‚ùå √âchec des migrations")
        sys.exit(1)
    
    # Collecte des fichiers statiques
    if not collect_static():
        print("‚ùå √âchec de la collecte des fichiers statiques")
        sys.exit(1)
    
    # Cr√©ation d'un superutilisateur
    if not create_superuser():
        print("‚ùå √âchec de la cr√©ation du superutilisateur")
        sys.exit(1)
    
    print("\n" + "=" * 60)
    print("üéâ Installation termin√©e avec succ√®s !")
    print("=" * 60)
    print("\nProchaines √©tapes:")
    print("1. Configurez votre fichier .env avec les bonnes valeurs")
    print("2. Lancez le serveur de d√©veloppement: python manage.py runserver")
    print("3. Acc√©dez √† l'application: http://localhost:8000")
    print("4. Consultez la documentation pour plus d'informations")

if __name__ == "__main__":
    main()